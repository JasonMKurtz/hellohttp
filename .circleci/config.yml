version: 2
orbs:
  orbs:
    gcp-gke: circleci/gcp-gke@1.0.4


jobs:
  build-job: 
    environment:
        TAG: 1.0."$CIRCLE_BUILD_NUM"
        DOCKER_USER: "$DOCKER_USER"
        DOCKER_PASS: "$DOCKER_PASS"
    docker:
      - image: circleci/buildpack-deps:stretch
    steps:
      - checkout
      - setup_remote_docker
      - run: 
          name: Build image
          command: |
            docker build -t jmliber/hellohttp:$TAG .
      - run: 
          name: Push image
          command: | 
            echo "$DOCKER_PASS" | docker login -u "$DOCKER_USER" --password-stdin
            docker push jmliber/hellohttp:$TAG 
  # build job ommitted for brevity
  deploy-job:
    docker:
      - image: hellohttp
    working_directory: /tmp/my-project  
    steps:
      - run:
          name: Deploy Master to GKE
          command: |
            - gcloud docker push us.gcr.io/${PROJECT_NAME}/hello 
          # Push Docker image to registry, update K8s deployment to use new image - `gcloud` command handles authentication and push all at once
          # The new image is now available in GCR for the GCP infrastructure to access, next, change permissions:
          # sudo chown -R ubuntu:ubuntu /home/ubuntu/.kube
          # Use `kubectl` to find the line that specifies the image to use for our container, replace with image tag of the new image. 
          # The K8s deployment intelligently upgrades the cluster by shutting down old containers and starting up-to-date ones.
          # kubectl patch deployment docker-hello-google -p '{"spec":{"template":{"spec":{"containers":[{"name":"docker-hello-google","image":"us.gcr.io/circle-ctl-test/hello:'"$CIRCLE_SHA1"'"}]}}}}'

workflows:
  version: 2
  build-deploy:
    jobs:
      - build-job 
      - deploy-job:
          requires:
            - build-job # Only deploy once the build job has completed
          filters:
            branches:
              only: master # Only deploy on the master branch